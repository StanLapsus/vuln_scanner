#!/usr/bin/env python3
"""
Vulnerability Scanner Analytics and Visualization Module
Provides charts, heatmaps, and visual analytics for scan results
"""

import json
import logging
from datetime import datetime
from typing import Dict, List, Any, Optional
import base64
import io

logger = logging.getLogger(__name__)

class VulnerabilityAnalytics:
    """Analytics and visualization for vulnerability scan results"""
    
    def __init__(self):
        self.chart_colors = {
            'Critical': '#dc3545',
            'High': '#fd7e14',
            'Medium': '#ffc107',
            'Low': '#28a745',
            'Info': '#6c757d'
        }
        
    def generate_analytics_dashboard(self, scan_results: Dict[str, Any]) -> Dict[str, Any]:
        """Generate comprehensive analytics dashboard"""
        dashboard = {
            'timestamp': datetime.now().isoformat(),
            'scan_id': scan_results.get('scan_id', 'unknown'),
            'target': scan_results.get('target', 'unknown'),
            'summary': self._generate_summary_stats(scan_results),
            'charts': self._generate_charts_data(scan_results),
            'heatmaps': self._generate_heatmaps(scan_results),
            'timeline': self._generate_timeline_data(scan_results),
            'risk_assessment': self._generate_detailed_risk_assessment(scan_results)
        }
        
        return dashboard
    
    def _generate_summary_stats(self, scan_results: Dict[str, Any]) -> Dict[str, Any]:
        """Generate summary statistics"""
        stats = {
            'total_tests': 0,
            'completed_tests': 0,
            'failed_tests': 0,
            'total_vulnerabilities': 0,
            'vulnerability_breakdown': {'Critical': 0, 'High': 0, 'Medium': 0, 'Low': 0, 'Info': 0},
            'security_score': 0,
            'risk_level': 'Unknown'
        }
        
        # Extract basic stats
        if 'summary' in scan_results:
            summary = scan_results['summary']
            stats['total_tests'] = summary.get('total_tests', 0)
            stats['completed_tests'] = summary.get('completed_tests', 0)
            stats['failed_tests'] = summary.get('failed_tests', 0)
        
        # Count vulnerabilities from all tests
        vulnerabilities = self._extract_all_vulnerabilities(scan_results)
        stats['total_vulnerabilities'] = len(vulnerabilities)
        
        # Breakdown by severity
        for vuln in vulnerabilities:
            severity = vuln.get('severity', 'Info')
            if severity in stats['vulnerability_breakdown']:
                stats['vulnerability_breakdown'][severity] += 1
        
        # Calculate security score (0-100, higher is better)
        total_possible_score = 100
        severity_penalties = {
            'Critical': 25,
            'High': 15,
            'Medium': 8,
            'Low': 3,
            'Info': 1
        }
        
        penalty = 0
        for severity, count in stats['vulnerability_breakdown'].items():
            penalty += count * severity_penalties.get(severity, 0)
        
        stats['security_score'] = max(0, total_possible_score - penalty)
        
        # Determine risk level
        if stats['security_score'] >= 80:
            stats['risk_level'] = 'Low'
        elif stats['security_score'] >= 60:
            stats['risk_level'] = 'Medium'
        elif stats['security_score'] >= 40:
            stats['risk_level'] = 'High'
        else:
            stats['risk_level'] = 'Critical'
        
        return stats
    
    def _generate_charts_data(self, scan_results: Dict[str, Any]) -> Dict[str, Any]:
        """Generate data for various charts"""
        charts = {}
        
        # Vulnerability severity pie chart
        vulnerabilities = self._extract_all_vulnerabilities(scan_results)
        severity_counts = {'Critical': 0, 'High': 0, 'Medium': 0, 'Low': 0, 'Info': 0}
        
        for vuln in vulnerabilities:
            severity = vuln.get('severity', 'Info')
            if severity in severity_counts:
                severity_counts[severity] += 1
        
        charts['vulnerability_severity_pie'] = {
            'type': 'pie',
            'title': 'Vulnerabilities by Severity',
            'data': [
                {'label': severity, 'value': count, 'color': self.chart_colors.get(severity, '#6c757d')}
                for severity, count in severity_counts.items() if count > 0
            ]
        }
        
        # Test results bar chart
        test_results = self._extract_test_results(scan_results)
        charts['test_results_bar'] = {
            'type': 'bar',
            'title': 'Test Results Overview',
            'data': [
                {'label': 'Passed', 'value': test_results['passed'], 'color': '#28a745'},
                {'label': 'Failed', 'value': test_results['failed'], 'color': '#dc3545'},
                {'label': 'Errors', 'value': test_results['errors'], 'color': '#ffc107'}
            ]
        }
        
        # Vulnerability types distribution
        vuln_types = {}
        for vuln in vulnerabilities:
            vuln_type = vuln.get('type', 'Unknown')
            vuln_types[vuln_type] = vuln_types.get(vuln_type, 0) + 1
        
        charts['vulnerability_types_bar'] = {
            'type': 'bar',
            'title': 'Vulnerability Types Distribution',
            'data': [
                {'label': vuln_type, 'value': count, 'color': self._get_random_color(i)}
                for i, (vuln_type, count) in enumerate(vuln_types.items())
            ]
        }
        
        # Security score gauge
        summary_stats = self._generate_summary_stats(scan_results)
        charts['security_score_gauge'] = {
            'type': 'gauge',
            'title': 'Security Score',
            'data': {
                'value': summary_stats['security_score'],
                'max': 100,
                'color': self._get_score_color(summary_stats['security_score'])
            }
        }
        
        return charts
    
    def _generate_heatmaps(self, scan_results: Dict[str, Any]) -> Dict[str, Any]:
        """Generate heatmap data for vulnerability visualization"""
        heatmaps = {}
        
        # Vulnerability distribution heatmap
        vulnerabilities = self._extract_all_vulnerabilities(scan_results)
        
        # Create a matrix of vulnerability types vs severity
        vuln_types = list(set(vuln.get('type', 'Unknown') for vuln in vulnerabilities))
        severity_levels = ['Critical', 'High', 'Medium', 'Low', 'Info']
        
        heatmap_data = []
        for vuln_type in vuln_types:
            row = {'type': vuln_type}
            for severity in severity_levels:
                count = len([v for v in vulnerabilities if v.get('type') == vuln_type and v.get('severity') == severity])
                row[severity] = count
            heatmap_data.append(row)
        
        heatmaps['vulnerability_distribution'] = {
            'title': 'Vulnerability Distribution Heatmap',
            'data': heatmap_data,
            'x_axis': severity_levels,
            'y_axis': vuln_types,
            'colors': {
                'low': '#28a745',
                'medium': '#ffc107',
                'high': '#fd7e14',
                'critical': '#dc3545'
            }
        }
        
        # Risk assessment heatmap by test categories
        test_categories = self._categorize_tests(scan_results)
        risk_heatmap = []
        
        for category, tests in test_categories.items():
            category_vulns = []
            for test in tests:
                if 'vulnerabilities' in test.get('details', {}):
                    category_vulns.extend(test['details']['vulnerabilities'])
            
            risk_score = self._calculate_category_risk(category_vulns)
            risk_heatmap.append({
                'category': category,
                'risk_score': risk_score,
                'vulnerability_count': len(category_vulns)
            })
        
        heatmaps['risk_assessment'] = {
            'title': 'Risk Assessment by Category',
            'data': risk_heatmap
        }
        
        return heatmaps
    
    def _generate_timeline_data(self, scan_results: Dict[str, Any]) -> Dict[str, Any]:
        """Generate timeline data for scan progression"""
        timeline = {
            'scan_start': scan_results.get('start_time', datetime.now().isoformat()),
            'scan_end': scan_results.get('end_time', datetime.now().isoformat()),
            'duration': scan_results.get('duration', 0),
            'test_timeline': []
        }
        
        # Extract test execution timeline
        tests = scan_results.get('tests', {})
        for test_name, test_data in tests.items():
            timeline['test_timeline'].append({
                'test': test_name,
                'timestamp': test_data.get('timestamp', ''),
                'status': test_data.get('status', 'unknown'),
                'duration': test_data.get('duration', 0)
            })
        
        return timeline
    
    def _generate_detailed_risk_assessment(self, scan_results: Dict[str, Any]) -> Dict[str, Any]:
        """Generate detailed risk assessment"""
        vulnerabilities = self._extract_all_vulnerabilities(scan_results)
        
        risk_assessment = {
            'overall_risk': 'Unknown',
            'risk_factors': [],
            'mitigation_priorities': [],
            'compliance_status': {},
            'recommendations': []
        }
        
        # Calculate overall risk
        critical_count = len([v for v in vulnerabilities if v.get('severity') == 'Critical'])
        high_count = len([v for v in vulnerabilities if v.get('severity') == 'High'])
        
        if critical_count > 0:
            risk_assessment['overall_risk'] = 'Critical'
        elif high_count > 2:
            risk_assessment['overall_risk'] = 'High'
        elif high_count > 0:
            risk_assessment['overall_risk'] = 'Medium'
        else:
            risk_assessment['overall_risk'] = 'Low'
        
        # Identify risk factors
        risk_factors = []
        if critical_count > 0:
            risk_factors.append(f"{critical_count} Critical vulnerabilities found")
        if high_count > 0:
            risk_factors.append(f"{high_count} High severity vulnerabilities found")
        
        # Check for common dangerous vulnerabilities
        dangerous_vulns = ['SQL Injection', 'Cross-Site Scripting', 'Command Injection', 'Path Traversal']
        for vuln in vulnerabilities:
            vuln_type = vuln.get('type', '')
            if any(dangerous in vuln_type for dangerous in dangerous_vulns):
                risk_factors.append(f"Dangerous vulnerability type: {vuln_type}")
        
        risk_assessment['risk_factors'] = risk_factors
        
        # Generate mitigation priorities
        priorities = []
        if critical_count > 0:
            priorities.append("Immediate: Fix all Critical vulnerabilities")
        if high_count > 0:
            priorities.append("High: Address High severity vulnerabilities")
        priorities.append("Medium: Implement security best practices")
        priorities.append("Low: Regular security monitoring")
        
        risk_assessment['mitigation_priorities'] = priorities
        
        # Basic compliance status (simplified)
        compliance = {
            'OWASP_Top_10': self._check_owasp_compliance(vulnerabilities),
            'Security_Headers': self._check_security_headers_compliance(scan_results),
            'SSL_TLS': self._check_ssl_compliance(scan_results)
        }
        
        risk_assessment['compliance_status'] = compliance
        
        # Generate recommendations
        recommendations = []
        if critical_count > 0:
            recommendations.append("Immediately patch all Critical vulnerabilities")
        if high_count > 0:
            recommendations.append("Prioritize fixing High severity vulnerabilities")
        recommendations.append("Implement Web Application Firewall (WAF)")
        recommendations.append("Regular security testing and monitoring")
        recommendations.append("Security awareness training for developers")
        
        risk_assessment['recommendations'] = recommendations
        
        return risk_assessment
    
    def _extract_all_vulnerabilities(self, scan_results: Dict[str, Any]) -> List[Dict[str, Any]]:
        """Extract all vulnerabilities from scan results"""
        vulnerabilities = []
        
        # Extract from basic vulnerability scan
        tests = scan_results.get('tests', {})
        for test_name, test_data in tests.items():
            if 'details' in test_data and 'vulnerabilities' in test_data['details']:
                vulnerabilities.extend(test_data['details']['vulnerabilities'])
        
        # Extract from advanced vulnerability scan
        if 'advanced_vulnerability_scan' in tests:
            adv_scan = tests['advanced_vulnerability_scan']
            if 'details' in adv_scan and 'vulnerabilities' in adv_scan['details']:
                vulnerabilities.extend(adv_scan['details']['vulnerabilities'])
        
        return vulnerabilities
    
    def _extract_test_results(self, scan_results: Dict[str, Any]) -> Dict[str, int]:
        """Extract test results summary"""
        results = {'passed': 0, 'failed': 0, 'errors': 0}
        
        tests = scan_results.get('tests', {})
        for test_name, test_data in tests.items():
            status = test_data.get('status', 'unknown')
            if status == 'success':
                results['passed'] += 1
            elif status == 'error':
                results['errors'] += 1
            else:
                results['failed'] += 1
        
        return results
    
    def _categorize_tests(self, scan_results: Dict[str, Any]) -> Dict[str, List]:
        """Categorize tests by security domain"""
        categories = {
            'Network Security': [],
            'Web Application Security': [],
            'Infrastructure Security': [],
            'Information Disclosure': [],
            'Authentication & Authorization': []
        }
        
        test_mapping = {
            'port_scan': 'Network Security',
            'ssl_analysis': 'Infrastructure Security',
            'security_headers': 'Web Application Security',
            'vulnerability_scan': 'Web Application Security',
            'advanced_vulnerability_scan': 'Web Application Security',
            'information_disclosure': 'Information Disclosure',
            'technology_detection': 'Information Disclosure'
        }
        
        tests = scan_results.get('tests', {})
        for test_name, test_data in tests.items():
            category = test_mapping.get(test_name, 'Web Application Security')
            categories[category].append(test_data)
        
        return categories
    
    def _calculate_category_risk(self, vulnerabilities: List[Dict]) -> float:
        """Calculate risk score for a category"""
        if not vulnerabilities:
            return 0.0
        
        severity_weights = {'Critical': 10, 'High': 7, 'Medium': 4, 'Low': 1, 'Info': 0.5}
        total_weight = sum(severity_weights.get(v.get('severity', 'Info'), 0) for v in vulnerabilities)
        
        return min(100.0, total_weight * 2)  # Scale to 0-100
    
    def _get_random_color(self, index: int) -> str:
        """Get a color for chart data"""
        colors = ['#007bff', '#28a745', '#ffc107', '#dc3545', '#6f42c1', '#20c997', '#fd7e14']
        return colors[index % len(colors)]
    
    def _get_score_color(self, score: float) -> str:
        """Get color based on security score"""
        if score >= 80:
            return '#28a745'  # Green
        elif score >= 60:
            return '#ffc107'  # Yellow
        elif score >= 40:
            return '#fd7e14'  # Orange
        else:
            return '#dc3545'  # Red
    
    def _check_owasp_compliance(self, vulnerabilities: List[Dict]) -> Dict[str, Any]:
        """Check OWASP Top 10 compliance"""
        owasp_categories = [
            'Broken Access Control',
            'Cryptographic Failures',
            'Injection',
            'Insecure Design',
            'Security Misconfiguration',
            'Vulnerable and Outdated Components',
            'Identification and Authentication Failures',
            'Software and Data Integrity Failures',
            'Security Logging and Monitoring Failures',
            'Server-Side Request Forgery'
        ]
        
        compliance = {'compliant': True, 'violations': []}
        
        # Check for common OWASP violations
        for vuln in vulnerabilities:
            vuln_type = vuln.get('type', '')
            if 'SQL Injection' in vuln_type or 'XSS' in vuln_type or 'Command Injection' in vuln_type:
                compliance['compliant'] = False
                compliance['violations'].append(f"A03:2021 - Injection: {vuln_type}")
        
        return compliance
    
    def _check_security_headers_compliance(self, scan_results: Dict[str, Any]) -> Dict[str, Any]:
        """Check security headers compliance"""
        compliance = {'compliant': True, 'missing_headers': []}
        
        tests = scan_results.get('tests', {})
        if 'security_headers' in tests:
            headers_test = tests['security_headers']
            if 'details' in headers_test and 'missing_headers' in headers_test['details']:
                missing = headers_test['details']['missing_headers']
                if missing:
                    compliance['compliant'] = False
                    compliance['missing_headers'] = missing
        
        return compliance
    
    def _check_ssl_compliance(self, scan_results: Dict[str, Any]) -> Dict[str, Any]:
        """Check SSL/TLS compliance"""
        compliance = {'compliant': True, 'issues': []}
        
        tests = scan_results.get('tests', {})
        if 'ssl_analysis' in tests:
            ssl_test = tests['ssl_analysis']
            if ssl_test.get('status') == 'error':
                compliance['compliant'] = False
                compliance['issues'].append('SSL/TLS not properly configured')
        
        return compliance
    
    def generate_html_charts(self, analytics_data: Dict[str, Any]) -> str:
        """Generate HTML with embedded charts"""
        html_template = """
        <!DOCTYPE html>
        <html>
        <head>
            <title>Vulnerability Analytics Dashboard</title>
            <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
            <style>
                body { font-family: Arial, sans-serif; margin: 20px; background: #f5f5f5; }
                .container { max-width: 1200px; margin: 0 auto; }
                .header { text-align: center; margin-bottom: 30px; }
                .chart-container { background: white; padding: 20px; margin: 20px 0; border-radius: 8px; box-shadow: 0 2px 4px rgba(0,0,0,0.1); }
                .chart-grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(400px, 1fr)); gap: 20px; }
                .summary-stats { display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 15px; margin-bottom: 30px; }
                .stat-card { background: white; padding: 20px; text-align: center; border-radius: 8px; box-shadow: 0 2px 4px rgba(0,0,0,0.1); }
                .stat-value { font-size: 2em; font-weight: bold; color: #333; }
                .stat-label { color: #666; margin-top: 5px; }
                .risk-high { color: #dc3545; }
                .risk-medium { color: #ffc107; }
                .risk-low { color: #28a745; }
                .heatmap { width: 100%; height: 400px; }
                .heatmap-cell { display: inline-block; width: 40px; height: 40px; margin: 2px; text-align: center; line-height: 40px; color: white; font-weight: bold; }
            </style>
        </head>
        <body>
            <div class="container">
                <div class="header">
                    <h1>Vulnerability Analytics Dashboard</h1>
                    <p>Target: {target} | Scan Time: {timestamp}</p>
                </div>
                
                <div class="summary-stats">
                    <div class="stat-card">
                        <div class="stat-value">{total_vulnerabilities}</div>
                        <div class="stat-label">Total Vulnerabilities</div>
                    </div>
                    <div class="stat-card">
                        <div class="stat-value {risk_class}">{risk_level}</div>
                        <div class="stat-label">Risk Level</div>
                    </div>
                    <div class="stat-card">
                        <div class="stat-value">{security_score}%</div>
                        <div class="stat-label">Security Score</div>
                    </div>
                    <div class="stat-card">
                        <div class="stat-value">{completed_tests}</div>
                        <div class="stat-label">Tests Completed</div>
                    </div>
                </div>
                
                <div class="chart-grid">
                    <div class="chart-container">
                        <canvas id="vulnerabilitySeverityChart"></canvas>
                    </div>
                    <div class="chart-container">
                        <canvas id="testResultsChart"></canvas>
                    </div>
                    <div class="chart-container">
                        <canvas id="vulnerabilityTypesChart"></canvas>
                    </div>
                    <div class="chart-container">
                        <canvas id="securityScoreChart"></canvas>
                    </div>
                </div>
                
                <div class="chart-container">
                    <h3>Risk Assessment</h3>
                    <div id="riskAssessment">
                        <h4>Risk Factors:</h4>
                        <ul>
                            {risk_factors}
                        </ul>
                        <h4>Mitigation Priorities:</h4>
                        <ol>
                            {mitigation_priorities}
                        </ol>
                        <h4>Recommendations:</h4>
                        <ul>
                            {recommendations}
                        </ul>
                    </div>
                </div>
            </div>
            
            <script>
                // Initialize charts with data
                const chartsData = {charts_data};
                
                // Vulnerability Severity Pie Chart
                if (chartsData.vulnerability_severity_pie && chartsData.vulnerability_severity_pie.data.length > 0) {{
                    const ctx1 = document.getElementById('vulnerabilitySeverityChart').getContext('2d');
                    new Chart(ctx1, {{
                        type: 'pie',
                        data: {{
                            labels: chartsData.vulnerability_severity_pie.data.map(d => d.label),
                            datasets: [{{
                                data: chartsData.vulnerability_severity_pie.data.map(d => d.value),
                                backgroundColor: chartsData.vulnerability_severity_pie.data.map(d => d.color)
                            }}]
                        }},
                        options: {{
                            responsive: true,
                            plugins: {{
                                title: {{
                                    display: true,
                                    text: 'Vulnerabilities by Severity'
                                }}
                            }}
                        }}
                    }});
                }}
                
                // Test Results Bar Chart
                if (chartsData.test_results_bar) {{
                    const ctx2 = document.getElementById('testResultsChart').getContext('2d');
                    new Chart(ctx2, {{
                        type: 'bar',
                        data: {{
                            labels: chartsData.test_results_bar.data.map(d => d.label),
                            datasets: [{{
                                label: 'Count',
                                data: chartsData.test_results_bar.data.map(d => d.value),
                                backgroundColor: chartsData.test_results_bar.data.map(d => d.color)
                            }}]
                        }},
                        options: {{
                            responsive: true,
                            plugins: {{
                                title: {{
                                    display: true,
                                    text: 'Test Results Overview'
                                }}
                            }}
                        }}
                    }});
                }}
                
                // Vulnerability Types Bar Chart
                if (chartsData.vulnerability_types_bar && chartsData.vulnerability_types_bar.data.length > 0) {{
                    const ctx3 = document.getElementById('vulnerabilityTypesChart').getContext('2d');
                    new Chart(ctx3, {{
                        type: 'bar',
                        data: {{
                            labels: chartsData.vulnerability_types_bar.data.map(d => d.label),
                            datasets: [{{
                                label: 'Count',
                                data: chartsData.vulnerability_types_bar.data.map(d => d.value),
                                backgroundColor: chartsData.vulnerability_types_bar.data.map(d => d.color)
                            }}]
                        }},
                        options: {{
                            responsive: true,
                            plugins: {{
                                title: {{
                                    display: true,
                                    text: 'Vulnerability Types Distribution'
                                }}
                            }}
                        }}
                    }});
                }}
                
                // Security Score Gauge (using doughnut chart)
                if (chartsData.security_score_gauge) {{
                    const ctx4 = document.getElementById('securityScoreChart').getContext('2d');
                    const score = chartsData.security_score_gauge.data.value;
                    new Chart(ctx4, {{
                        type: 'doughnut',
                        data: {{
                            labels: ['Security Score', 'Remaining'],
                            datasets: [{{
                                data: [score, 100 - score],
                                backgroundColor: [chartsData.security_score_gauge.data.color, '#e9ecef']
                            }}]
                        }},
                        options: {{
                            responsive: true,
                            plugins: {{
                                title: {{
                                    display: true,
                                    text: 'Security Score: ' + score + '%'
                                }}
                            }}
                        }}
                    }});
                }}
            </script>
        </body>
        </html>
        """
        
        # Format the template with data
        summary = analytics_data.get('summary', {})
        risk_assessment = analytics_data.get('risk_assessment', {})
        
        risk_class = 'risk-low'
        if summary.get('risk_level') == 'High':
            risk_class = 'risk-high'
        elif summary.get('risk_level') == 'Medium':
            risk_class = 'risk-medium'
        
        risk_factors_html = ''.join([f"<li>{factor}</li>" for factor in risk_assessment.get('risk_factors', [])])
        mitigation_priorities_html = ''.join([f"<li>{priority}</li>" for priority in risk_assessment.get('mitigation_priorities', [])])
        recommendations_html = ''.join([f"<li>{rec}</li>" for rec in risk_assessment.get('recommendations', [])])
        
        return html_template.format(
            target=analytics_data.get('target', 'Unknown'),
            timestamp=analytics_data.get('timestamp', 'Unknown'),
            total_vulnerabilities=summary.get('total_vulnerabilities', 0),
            risk_level=summary.get('risk_level', 'Unknown'),
            risk_class=risk_class,
            security_score=summary.get('security_score', 0),
            completed_tests=summary.get('completed_tests', 0),
            risk_factors=risk_factors_html,
            mitigation_priorities=mitigation_priorities_html,
            recommendations=recommendations_html,
            charts_data=json.dumps(analytics_data.get('charts', {}))
        )